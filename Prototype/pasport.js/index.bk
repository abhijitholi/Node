const express = require('express');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const User = require('./user'); // Assuming this file exports the User model
const { DataBase } = require('./db'); // Assuming this file exports a function to connect to the database
const mongoose = require('mongoose');

// password hashing start
const bcrypt = require('bcrypt');
const saltRounds = 10;
const myPlaintextPassword = 's0/\/\P4$$w0rD';
const someOtherPlaintextPassword = 'not_bacon';
// password hashing start

const app = express();

// Middleware setup
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(session({
    secret: process.env.SESSION_SECRET || 'secret',
    resave: false,
    saveUninitialized: true
}));
app.use(passport.initialize());
app.use(passport.session());

// Passport local strategy setup 
passport.use(new LocalStrategy(
    async function (username, password, done) {
        try {
            const user = await User.findOne({ username: username });
            if (!user) {
                return done(null, false, { message: 'Incorrect username' });
            }
            if (!bcrypt.compareSync(password, user.password)) {
                return done(null, false, { message: 'Incorrect password' });
            }
            return done(null, user);
        } catch (error) {
            return done(error);
        }
    }
));

passport.serializeUser(function (user, done) {
    done(null, user.id);
});

passport.deserializeUser(async function (id, done) {
    try {
        const user = await User.findById(id);
        done(null, user);
    } catch (error) {
        done(error);
    }
});

// Routes
app.get('/', async (req, res) => {
    try {
        const users = await User.find();
        res.json(users);
    } catch (error) {
        console.error(error);
        res.status(500).send('Internal server error');
    }
});


app.post('/register', async (req, res, done) => {
    try {
        const existingUser = await User.findOne({ username: req.body.username });
        
        if (existingUser) { 
            return res.json('Already Registered');
        } 
        
        // Hash the password asynchronously
        bcrypt.hash(req.body.password, saltRounds, async (err, hash) => {
            if (err) {
                throw err; // Handle error if bcrypt hashing fails
            }
            // Create a new user with the hashed password
            const newUser = await User.create({ username: req.body.username, password: hash });
            done(null, newUser); // Pass the newly created user to the next middleware
        });
    } catch (err) {
        done(err, false);
    }
});




app.post('/login',
    passport.authenticate('local', { failureRedirect: '/login' }),
    function (req, res) {
        // If authentication succeeds, this function will be called
        //res.redirect('/dashboard'); // Redirect to a dashboard page or any other authenticated route
        res.send("You are logedin ")
    }
);

app.get('/test', isAuthenticated, (req, res) => {
    req.session.test ? req.session.test++ : req.session.test = 1;
    res.send(req.session.test.toString() + " " + req.user.username);
});

app.post('/logout', function(req, res, next){
    req.logout(function(err) {
      if (err) { return next(err); }
      //res.redirect('/login');
      res.send("You are logout")
    });
  });


function isAuthenticated(req, res, next) {
    if (req.user) {
        return next();
    }else{
        return res.redirect("/notlogin"); 
    }
}


// Connect to the database and start the server
DataBase()
    .then(() => {
        app.listen(8080, () => {
            console.log("Server is started on port 8080");
        });
    })
    .catch(error => {
        console.error("Database connection error:", error);
    });
